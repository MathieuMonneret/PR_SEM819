C51 COMPILER V9.52.0.0   FO_M3                                                             04/02/2019 17:37:19 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE FO_M3
OBJECT MODULE PLACED IN FO-M3.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE FO-M3.c OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "FO-M3.h"
*** WARNING C323 IN LINE 1 OF FO-M3.h: newline expected, extra characters found
   2          float Old_Angle = 0;
   3          int PWM = PWM_START;
   4          //WARNING change this!!
   5          sbit PWM_OUT = P0^2;
   6          
   7          
   8          //needed to be launch at the start of the robot 
   9            void init_FO_M3(){
  10   1          WDTCN = 0xDE;                 // Disable watchdog 
  11   1          WDTCN = 0xAD;
  12   1          OSCXCN = 0x67;                  // use external clock
  13   1          OSCICN |= 0x08;                 //System clock = extern clock
  14   1          XBR0 |= 0x08;
  15   1          XBR2 |= 0x40;
  16   1          P3MDOUT |= 0x20;              // WARNING push-pull P0.0
  17   1          P1MDOUT |=  0x20;             // WARNING push-pull P1.6     
  18   1          PWM_OUT=!PWM_OUT;
  19   1          init_PCA();   
  20   1        }
  21            
  22            //needed to be launch at the start of the robot 
  23          void init_PCA()
  24          {
  25   1          PCA0MD = 0x00;                //disable CF interrupt & SysClk/12
  26   1          PCA0CPL0 = (0xFF & PWM); //initialize PCA compare value
  27   1          PCA0CPH0 = (0xFF & (PWM>>8));
  28   1          PCA0CPM0 = 0x4D;              //CCM0 in High Speed outpout mode
  29   1          EIE1 |= 0x08;                 //enable PCA interrupt
  30   1          EA = 1;
  31   1          PCA0CN = 0x40;
  32   1      }
  33          
  34          
  35          void PCA_ISR(void)interrupt 9 {
  36   1          
  37   1          if (CCF0){
  38   2              CCF0=0;                       //clear compare indicator
  39   2              if (PWM_OUT){                 //process rising edge
  40   3                  PCA0CPL0 = (0xff & PWM); //set next match to PWM
  41   3                  PCA0CPH0=(0xff & (PWM >> 8));
  42   3              }
  43   2              else{                         //process falling edge
  44   3                  PCA0CPL0 = 0;             //set next match to 0
  45   3                  PCA0CPH0 = 0;
  46   3              }
  47   2                                            //handle other PCA interrupt
  48   2          }
  49   1          else if (CCF1){
  50   2              CCF1 = 0;
  51   2          }
  52   1          else if (CCF2){
  53   2              CCF2 = 0;
  54   2          }
C51 COMPILER V9.52.0.0   FO_M3                                                             04/02/2019 17:37:19 PAGE 2   

  55   1          else if (CCF3){
  56   2              CCF3 = 0;
  57   2          }
  58   1          else if (CCF4){
  59   2              CCF4 = 0;
  60   2          }
  61   1          else if (CF){
  62   2              CF = 0;
  63   2          }
  64   1      }
  65            //convert char Angle to int between 0 and 180 deg
  66          int AngleConvert(char* Angle){
  67   1          float AngleInt;
  68   1         if ( Angle[0] == '-' ){             // negative angle
  69   2            if (Angle[2]=='\0'){
  70   3              AngleInt=90-( Angle[1] - '0' );
  71   3            }
  72   2            else{
  73   3              AngleInt = 90 -(( Angle[1] - '0' ) * 10 + ( Angle[2] - '0' )) ;
  74   3            }
  75   2          }
  76   1          
  77   1          else{                              // positive angle
  78   2            if (Angle[1]=='\0'){
  79   3              AngleInt=90+( Angle[0] - '0' );
  80   3            }
  81   2            else{
  82   3              AngleInt = 90 + ( Angle[0] - '0' ) * 10 + ( Angle[1] - '0' );
  83   3            }
  84   2          }
  85   1          return AngleInt;
  86   1      }
  87          
  88          //Change servo angle and return an estimated time to do it, (will be call in FO-M1)
  89          float CDE_Servo_H(char* Angle){
  90   1          float Time_To_Move;
  91   1          float AngleFloat = AngleConvert(Angle);        // [0;180]
  92   1          float dutyCycle = AngleFloat / 35.6 + 1.69;    //convert angle to a pourcentage of the period [1.69%;6
             -.74%]
  93   1          float test;
  94   1          PWM = (dutyCycle/100)*65536;                   //change PWM value
  95   1          test=( AngleFloat - Old_Angle );
  96   1          Time_To_Move = Speed * abs( AngleFloat - Old_Angle ) / 60;//time to move calcul
  97   1          Old_Angle = AngleFloat;                 //keep the actual angle
  98   1          return Time_To_Move;
  99   1      }
 100          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    694    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
